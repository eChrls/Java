/**
 * Diálogo modal para mostrar los alquileres de un usuario en una tabla.
 * Se puede usar tanto para alquileres activos como para historial.
 *
 * Uso:
 * VerAlquileresDialog dialog = new VerAlquileresDialog(parent, true, listaAlquileres);
 * dialog.setVisible(true);
 */
package views;

import entity.Alquiler;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Casa
 */
public class VerAlquileresDialog extends javax.swing.JDialog {

    /**
     * Creates new form VerAlquileresDialog
     */
    public VerAlquileresDialog(java.awt.Frame parent, boolean modal, List<Alquiler> alquileres) {
        super(parent, modal);
        initComponents();
        // Look & Feel Nimbus (igual que en el login)
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
        }

// Fuentes y colores modernos
        java.awt.Font fuenteTitulo = new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 20);
        java.awt.Font fuenteTabla = new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14);

        tablaAlquileres.setFont(fuenteTabla);
        btnAtras.setFont(fuenteTabla);
        getContentPane().setBackground(new java.awt.Color(245, 245, 245)); // Fondo claro
        cargarTabla(alquileres);
        setLocationRelativeTo(parent); // Centra el diálogo respecto al padre
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 // Método para cargar los datos en la tabla

    private void cargarTabla(List<Alquiler> alquileres) {
        String[] columnas = {"ID", "Película", "Fecha Alquiler"};
        Object[][] datos = new Object[alquileres.size()][columnas.length];

        for (int i = 0; i < alquileres.size(); i++) {
            Alquiler a = alquileres.get(i);
            datos[i][0] = a.getIdAlquiler();
            datos[i][1] = a.getPelicula().getTitulo(); // Ajusta si tu entidad Pelicula tiene otro campo
            datos[i][2] = a.getFechaAlquiler();
        }

        tablaAlquileres.setModel(new DefaultTableModel(datos, columnas) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // La tabla no es editable
            }
        });
    }

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {
        this.dispose();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Crea una lista de alquileres de prueba (vacía o con datos ficticios)
                java.util.List<entity.Alquiler> alquileresPrueba = new java.util.ArrayList<>();
                // Si quieres, añade alquileres de prueba aquí

                VerAlquileresDialog dialog = new VerAlquileresDialog(new javax.swing.JFrame(), true, alquileresPrueba);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private javax.swing.JButton btnAtras;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaAlquileres;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
