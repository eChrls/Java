package JuegoDeLaVida;

import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 * Implementación del Juego de la Vida de Conway
 * El juego simula la evolución de células en un tablero según reglas específicas
 */
public class Generacion {

    private int[][] celulas;
    private int generacionActual;
    private ArrayList<Integer> registroVivas;
    private int filas;
    private int columnas;

    /**
     * Constructor de la clase Generacion
     */
    public Generacion(int[][] celulas, int generacionActual, int filas, int columnas) {
        this.celulas = celulas;
        this.generacionActual = generacionActual;
        this.filas = filas;
        this.columnas = columnas;
        this.registroVivas = new ArrayList<>();
        this.registroVivas.add(contarCelulasVivasTotal(celulas));
    }

    // Getters y setters

    public int[][] getCelulas() {
        return celulas;
    }

    public void setCelulas(int[][] celulas) {
        this.celulas = celulas;
    }

    public int getGeneracionActual() {
        return generacionActual;
    }

    public void setGeneracionActual(int generacionActual) {
        this.generacionActual = generacionActual;
    }

    public ArrayList<Integer> getRegistroVivas() {
        return registroVivas;
    }

    public void setRegistroVivas(ArrayList<Integer> registroVivas) {
        this.registroVivas = registroVivas;
    }

    public int getFilas() {
        return filas;
    }

    public void setFilas(int filas) {
        this.filas = filas;
    }

    public int getColumnas() {
        return columnas;
    }

    public void setColumnas(int columnas) {
        this.columnas = columnas;
    }

    @Override
    public String toString() {
        return "Generacion{" +
               "generacion=" + generacionActual +
               ", filas=" + filas +
               ", columnas=" + columnas +
               ", celulasVivas=" + registroVivas.get(registroVivas.size() - 1) +
               ", totalGeneraciones=" + registroVivas.size() +
               '}';
    }

    /**
     * Crea una matriz cuadrada de n x n (máximo 25) con valores aleatorios entre 0 y 1
     */
    public static int[][] creaMatrizAleatoria(int n) {
        if (n > 25) {
            JOptionPane.showMessageDialog(null, "El tamaño de la matriz no puede ser mayor a 25");
            return null;
        }

        Random r = new Random();
        int[][] matriz = new int[n][n];
        for (int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz[i].length; j++) {
                matriz[i][j] = r.nextInt(2); // 0 o 1
            }
        }
        return matriz;
    }

    /**
     * Muestra la matriz en la consola
     */
    public static void mostrarMatriz(int[][] matriz) {
        for (int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz[i].length; j++) {
                System.out.print(matriz[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    /**
     * Muestra el menú principal del juego
     */
    public static void mostrarMenu() {
        int opcion;
        try {
            do {
                String menu = """
                BIENVENIDO AL JUEGO DE LA VIDA
                1. Cargar partida
                2. Iniciar juego
                3. Salir
                Elige una opcion:
                """;
                opcion = Integer.parseInt(JOptionPane.showInputDialog(menu));
                switch (opcion) {
                    case 1 -> cargarPartida();
                    case 2 -> iniciarJuego();
                    case 3 -> JOptionPane.showMessageDialog(null, "Gracias! Hasta pronto!");
                    default -> JOptionPane.showMessageDialog(null, "Opción no válida");
                }
            } while (opcion != 3);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Dato introducido no correcto, vuelva a intentarlo.");
            mostrarMenu();
        }
    }

    /**
     * Carga una partida desde un archivo (funcionalidad no implementada)
     */
    public static void cargarPartida() {
        JOptionPane.showMessageDialog(null, "Opcion en mantenimiento, pronto disponible");
    }

    /**
     * Inicia un nuevo juego
     */
    public static void iniciarJuego() {
        String opcion;
        try {
            do {
                opcion = JOptionPane.showInputDialog("""
                1. Colocación manual
                2. Colocación aleatoria
                3. Volver al menú anterior
                """);
                switch (opcion) {
                    case "1" -> colocacionManual();
                    case "2" -> colocacionAleatoria();
                    case "3" -> mostrarMenu();
                    default -> JOptionPane.showMessageDialog(null, "Opción no válida");
                }
            } while (!opcion.equals("3"));
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Dato introducido no correcto, vuelva a intentarlo.");
            iniciarJuego();
        }
    }

    /**
     * Permite al usuario colocar células manualmente
     */
    private static void colocacionManual() {
        int n = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el tamaño de la matriz (máx 25):"));
        if (n > 25) {
            JOptionPane.showMessageDialog(null, "El tamaño de la matriz no puede ser mayor a 25");
            return;
        }

        int[][] matriz = new int[n][n];
        String submenu;
        do {
            submenu = JOptionPane.showInputDialog("""
                1. Colocar una célula
                2. Finalizar colocación
                """);
            switch (submenu) {
                case "1" -> {
                    int fila = Integer.parseInt(JOptionPane.showInputDialog("Introduce la fila:"));
                    int columna = Integer.parseInt(JOptionPane.showInputDialog("Introduce la columna:"));
                    if (fila >= 0 && fila < n && columna >= 0 && columna < n) {
                        matriz[fila][columna] = 1;
                        JOptionPane.showMessageDialog(null, "Célula colocada en (" + fila + ", " + columna + ")");
                    } else {
                        JOptionPane.showMessageDialog(null, "Coordenadas fuera de rango");
                    }
                }
                case "2" -> {
                    Generacion gen = new Generacion(matriz, 0, n, n);
                    JOptionPane.showMessageDialog(null, "Tablero inicial creado:\n" + gen);
                }
            }
        } while (!submenu.equals("2"));
    }

    /**
     * Crea una matriz con células vivas colocadas aleatoriamente según un porcentaje
     */
    private static void colocacionAleatoria() {
        int porcentaje = Integer.parseInt(JOptionPane.showInputDialog("Introduce el porcentaje de células vivas (0-100):"));
        if (porcentaje < 0 || porcentaje > 100) {
            JOptionPane.showMessageDialog(null, "Porcentaje fuera de rango");
            return;
        }

        int n = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el tamaño de la matriz (máx 25):"));
        if (n > 25) {
            JOptionPane.showMessageDialog(null, "El tamaño de la matriz no puede ser mayor a 25");
            return;
        }

        int numCelulasVivas = (n * n * porcentaje) / 100;
        int[][] matriz = new int[n][n];
        Random r = new Random();
        for (int i = 0; i < numCelulasVivas; i++) {
            int fila, columna;
            do {
                fila = r.nextInt(n);
                columna = r.nextInt(n);
            } while (matriz[fila][columna] == 1);
            matriz[fila][columna] = 1;
        }

        Generacion gen = new Generacion(matriz, 0, n, n);
        JOptionPane.showMessageDialog(null, "Tablero inicial creado:\n" + gen);
    }

    /**
     * Cuenta el número total de células vivas en una matriz
     */
    public static int contarCelulasVivasTotal(int[][] matriz) {
        int contador = 0;
        for (int[] fila : matriz) {
            for (int celula : fila) {
                contador += celula;
            }
        }
        return contador;
    }

    /**
     * Método principal para iniciar el juego
     */
    public static void main(String[] args) {
        mostrarMenu();
    }
}
